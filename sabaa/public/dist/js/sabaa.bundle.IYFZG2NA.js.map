{
  "version": 3,
  "sources": ["../../../../../apps/sabaa/sabaa/public/js/taxes_and_totals.js", "../../../../../apps/sabaa/sabaa/public/js/sabaa.bundle.js"],
  "sourcesContent": ["\n// erpnext.taxes_and_totals = class TaxesAndTotals\n\nerpnext.taxes_and_totals.calculate_outstanding_amount = () => {\n    alert();\n}\n\nerpnext.taxes_and_totals.calculate_outstanding_amount2 = (update_paid_amount) => {\n    // NOTE:\n    // paid_amount and write_off_amount is only for POS/Loyalty Point Redemption Invoice\n    // total_advance is only for non POS Invoice\n    if(in_list([\"Sales Invoice\", \"POS Invoice\"], this.frm.doc.doctype) && this.frm.doc.is_return){\n        this.calculate_paid_amount();\n    }\n\n    if (this.frm.doc.is_return || (this.frm.doc.docstatus > 0) || this.is_internal_invoice()) return;\n\n    frappe.model.round_floats_in(this.frm.doc, [\"grand_total\", \"total_advance\", \"write_off_amount\"]);\n\n    if(in_list([\"Sales Invoice\", \"POS Invoice\", \"Purchase Invoice\"], this.frm.doc.doctype)) {\n        let grand_total = this.frm.doc.rounded_total || this.frm.doc.grand_total;\n        let base_grand_total = this.frm.doc.base_rounded_total || this.frm.doc.base_grand_total;\n\n        if(this.frm.doc.party_account_currency == this.frm.doc.currency) {\n            var total_amount_to_pay = flt((grand_total - this.frm.doc.total_advance\n                - this.frm.doc.write_off_amount), precision(\"grand_total\"));\n        } else {\n            var total_amount_to_pay = flt(\n                (flt(base_grand_total, precision(\"base_grand_total\"))\n                    - this.frm.doc.total_advance - this.frm.doc.base_write_off_amount),\n                precision(\"base_grand_total\")\n            );\n        }\n\n        frappe.model.round_floats_in(this.frm.doc, [\"paid_amount\"]);\n        this.set_in_company_currency(this.frm.doc, [\"paid_amount\"]);\n\n        if(this.frm.refresh_field){\n            this.frm.refresh_field(\"paid_amount\");\n            this.frm.refresh_field(\"base_paid_amount\");\n        }\n\n        if(in_list([\"Sales Invoice\", \"POS Invoice\"], this.frm.doc.doctype)) {\n            let total_amount_for_payment = (this.frm.doc.redeem_loyalty_points && this.frm.doc.loyalty_amount)\n                ? flt(total_amount_to_pay - this.frm.doc.loyalty_amount, precision(\"base_grand_total\"))\n                : total_amount_to_pay;\n            this.set_default_payment(total_amount_for_payment, update_paid_amount);\n            this.calculate_paid_amount();\n        }\n        this.calculate_change_amount();\n\n        var paid_amount = (this.frm.doc.party_account_currency == this.frm.doc.currency) ?\n            this.frm.doc.paid_amount : this.frm.doc.base_paid_amount;\n        this.frm.doc.outstanding_amount =  flt(total_amount_to_pay - flt(paid_amount) +\n            flt(this.frm.doc.change_amount * this.frm.doc.conversion_rate), precision(\"outstanding_amount\"));\n    }\n\n    if(this.frm.doc.doctype == \"Sales Invoice\") {\n        // get insurance coverage\n        this.frm.doc.custom_patient_payable_amount = 157.55;\n\n        // this.frm.doc.outstanding_amount -= this.frm.doc.custom_patient_payable_amount;\n        // this.frm.refresh_field(\"custom_patient_payable_amount\");\n        // this.frm.refresh_field(\"outstanding_amount\");\n    }\n}", "import \"./taxes_and_totals\";"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAGA,cAAQ,iBAAiB,+BAA+B,MAAM;AAC1D,cAAM;AAAA,MACV;AAEA,cAAQ,iBAAiB,gCAAgC,CAAC,uBAAuB;AAI7E,YAAG,QAAQ,CAAC,iBAAiB,aAAa,GAAG,QAAK,IAAI,IAAI,OAAO,KAAK,QAAK,IAAI,IAAI,WAAU;AACzF,kBAAK,sBAAsB;AAAA,QAC/B;AAEA,YAAI,QAAK,IAAI,IAAI,aAAc,QAAK,IAAI,IAAI,YAAY,KAAM,QAAK,oBAAoB;AAAG;AAE1F,eAAO,MAAM,gBAAgB,QAAK,IAAI,KAAK,CAAC,eAAe,iBAAiB,kBAAkB,CAAC;AAE/F,YAAG,QAAQ,CAAC,iBAAiB,eAAe,kBAAkB,GAAG,QAAK,IAAI,IAAI,OAAO,GAAG;AACpF,cAAI,cAAc,QAAK,IAAI,IAAI,iBAAiB,QAAK,IAAI,IAAI;AAC7D,cAAI,mBAAmB,QAAK,IAAI,IAAI,sBAAsB,QAAK,IAAI,IAAI;AAEvE,cAAG,QAAK,IAAI,IAAI,0BAA0B,QAAK,IAAI,IAAI,UAAU;AAC7D,gBAAI,sBAAsB,IAAK,cAAc,QAAK,IAAI,IAAI,gBACpD,QAAK,IAAI,IAAI,kBAAmB,UAAU,aAAa,CAAC;AAAA,UAClE,OAAO;AACH,gBAAI,sBAAsB;AAAA,cACrB,IAAI,kBAAkB,UAAU,kBAAkB,CAAC,IAC9C,QAAK,IAAI,IAAI,gBAAgB,QAAK,IAAI,IAAI;AAAA,cAChD,UAAU,kBAAkB;AAAA,YAChC;AAAA,UACJ;AAEA,iBAAO,MAAM,gBAAgB,QAAK,IAAI,KAAK,CAAC,aAAa,CAAC;AAC1D,kBAAK,wBAAwB,QAAK,IAAI,KAAK,CAAC,aAAa,CAAC;AAE1D,cAAG,QAAK,IAAI,eAAc;AACtB,oBAAK,IAAI,cAAc,aAAa;AACpC,oBAAK,IAAI,cAAc,kBAAkB;AAAA,UAC7C;AAEA,cAAG,QAAQ,CAAC,iBAAiB,aAAa,GAAG,QAAK,IAAI,IAAI,OAAO,GAAG;AAChE,gBAAI,2BAA4B,QAAK,IAAI,IAAI,yBAAyB,QAAK,IAAI,IAAI,iBAC7E,IAAI,sBAAsB,QAAK,IAAI,IAAI,gBAAgB,UAAU,kBAAkB,CAAC,IACpF;AACN,oBAAK,oBAAoB,0BAA0B,kBAAkB;AACrE,oBAAK,sBAAsB;AAAA,UAC/B;AACA,kBAAK,wBAAwB;AAE7B,cAAI,cAAe,QAAK,IAAI,IAAI,0BAA0B,QAAK,IAAI,IAAI,WACnE,QAAK,IAAI,IAAI,cAAc,QAAK,IAAI,IAAI;AAC5C,kBAAK,IAAI,IAAI,qBAAsB,IAAI,sBAAsB,IAAI,WAAW,IACxE,IAAI,QAAK,IAAI,IAAI,gBAAgB,QAAK,IAAI,IAAI,eAAe,GAAG,UAAU,oBAAoB,CAAC;AAAA,QACvG;AAEA,YAAG,QAAK,IAAI,IAAI,WAAW,iBAAiB;AAExC,kBAAK,IAAI,IAAI,gCAAgC;AAAA,QAKjD;AAAA,MACJ;AAAA;AAAA;;;ACjEA,gCAAO;",
  "names": []
}
